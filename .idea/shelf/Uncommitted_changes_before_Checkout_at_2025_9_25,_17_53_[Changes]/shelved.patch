Index: src/main/java/NumberTriangle.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * This is the provided NumberTriangle class to be used in this coding task.\n *\n * Note: This is like a tree, but some nodes in the structure have two parents.\n *\n * The structure is shown below. Observe that the parents of e are b and c, whereas\n * d and f each only have one parent. Each row is complete and will never be missing\n * a node. So each row has one more NumberTriangle object than the row above it.\n *\n *                  a\n *                b   c\n *              d   e   f\n *            h   i   j   k\n *\n * Also note that this data structure is minimally defined and is only intended to\n * be constructed using the loadTriangle method, which you will implement\n * in this file. We have not included any code to enforce the structure noted above,\n * and you don't have to write any either.\n *\n *\n * See NumberTriangleTest.java for a few basic test cases.\n *\n * Extra: If you decide to solve the Project Euler problems (see main),\n *        feel free to add extra methods to this class. Just make sure that your\n *        code still compiles and runs so that we can run the tests on your code.\n *\n */\npublic class NumberTriangle {\n\n    private int root;\n\n    private NumberTriangle left;\n    private NumberTriangle right;\n\n    public NumberTriangle(int root) {\n        this.root = root;\n    }\n\n    public void setLeft(NumberTriangle left) {\n        this.left = left;\n    }\n\n\n    public void setRight(NumberTriangle right) {\n        this.right = right;\n    }\n\n    public int getRoot() {\n        return root;\n    }\n\n\n    /**\n     * [not for credit]\n     * Set the root of this NumberTriangle to be the max path sum\n     * of this NumberTriangle, as defined in Project Euler problem 18.\n     * After this method is called, this NumberTriangle should be a leaf.\n     *\n     * Hint: think recursively and use the idea of partial tracing from first year :)\n     *\n     * Note: a NumberTriangle contains at least one value.\n     */\n    public void maxSumPath() {\n        // for fun [not for credit]:\n    }\n\n\n    public boolean isLeaf() {\n        return right == null && left == null;\n    }\n\n\n    /**\n     * Follow path through this NumberTriangle structure ('l' = left; 'r' = right) and\n     * return the root value at the end of the path. An empty string will return\n     * the root of the NumberTriangle.\n     *\n     * You can decide if you want to use a recursive or an iterative approach in your solution.\n     *\n     * You can assume that:\n     *      the length of path is less than the height of this NumberTriangle structure.\n     *      each character in the string is either 'l' or 'r'\n     *\n     * @param path the path to follow through this NumberTriangle\n     * @return the root value at the location indicated by path\n     *\n     */\n    public int retrieve(String path) {\n        // TODO implement this method\n        return -1;\n    }\n\n    /** Read in the NumberTriangle structure from a file.\n     *\n     * You may assume that it is a valid format with a height of at least 1,\n     * so there is at least one line with a number on it to start the file.\n     *\n     * See resources/input_tree.txt for an example NumberTriangle format.\n     *\n     * @param fname the file to load the NumberTriangle structure from\n     * @return the topmost NumberTriangle object in the NumberTriangle structure read from the specified file\n     * @throws IOException may naturally occur if an issue reading the file occurs\n     */\n    public static NumberTriangle loadTriangle(String fname) throws IOException {\n        // open the file and get a BufferedReader object whose methods\n        // are more convenient to work with when reading the file contents.\n        InputStream inputStream = NumberTriangle.class.getClassLoader().getResourceAsStream(fname);\n        BufferedReader br = new BufferedReader(new InputStreamReader(inputStream));\n        List<List<NumberTriangle>> levels = new ArrayList<>();\n\n\n        // will need to return the top of the NumberTriangle,\n        // so might want a variable for that.\n        NumberTriangle top = null;\n\n        String line = br.readLine();\n        while (line != null) {\n            String[] tokens = line.split(\" \");\n            List<NumberTriangle> row = new ArrayList<>();\n            for  (int i = 0; i < tokens.length; i++) {\n                row.add(new NumberTriangle(Integer.parseInt(tokens[i])));\n            }\n            levels.add(row);\n            //read the next line\n            line = br.readLine();\n        }\n        br.close();\n        for (int i = 0; i <= levels.size() - 1; i++) {\n            List<NumberTriangle> current = levels.get(i);\n            List<NumberTriangle> next = levels.get(i + 1);\n            for (int j = 0; j < levels.size(); j++) {\n                current.get(j).setLeft(next.get(j));\n                current.get(j).setRight(next.get(j + 1));\n            }\n\n        }\n        top = levels.get(0).get(0);\n        return top;\n    }\n\n    public static void main(String[] args) throws IOException {\n\n        NumberTriangle mt = NumberTriangle.loadTriangle(\"input_tree.txt\");\n\n        // [not for credit]\n        // you can implement NumberTriangle's maxPathSum method if you want to try to solve\n        // Problem 18 from project Euler [not for credit]\n        mt.maxSumPath();\n        System.out.println(mt.getRoot());\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/NumberTriangle.java b/src/main/java/NumberTriangle.java
--- a/src/main/java/NumberTriangle.java	(revision abd68c0fecf2dab8979f3b7bcdb2b597995d9f69)
+++ b/src/main/java/NumberTriangle.java	(date 1758837055163)
@@ -129,15 +129,6 @@
             line = br.readLine();
         }
         br.close();
-        for (int i = 0; i <= levels.size() - 1; i++) {
-            List<NumberTriangle> current = levels.get(i);
-            List<NumberTriangle> next = levels.get(i + 1);
-            for (int j = 0; j < levels.size(); j++) {
-                current.get(j).setLeft(next.get(j));
-                current.get(j).setRight(next.get(j + 1));
-            }
-
-        }
         top = levels.get(0).get(0);
         return top;
     }
